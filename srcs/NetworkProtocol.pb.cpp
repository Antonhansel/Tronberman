// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetworkProtocol.pb.h"

#include <algorithm>

#include "protobuf/stubs/common.h"
#include "protobuf/stubs/once.h"
#include "protobuf/io/coded_stream.h"
#include "protobuf/wire_format_lite_inl.h"
#include "protobuf/descriptor.h"
#include "protobuf/generated_message_reflection.h"
#include "protobuf/reflection_ops.h"
#include "protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

namespace Bomberman {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_OwnPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_OwnPlayerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetworkProtocol_2eproto() {
  protobuf_AddDesc_NetworkProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetworkProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, ownplayerinfo_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Player_descriptor_ = Message_descriptor_->nested_type(0);
  static const int Message_Player_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Player, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Player, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Player, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Player, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Player, life_),
  };
  Message_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Player_descriptor_,
      Message_Player::default_instance_,
      Message_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Player));
  Message_Map_descriptor_ = Message_descriptor_->nested_type(1);
  static const int Message_Map_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Map, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Map, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Map, data_),
  };
  Message_Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Map_descriptor_,
      Message_Map::default_instance_,
      Message_Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Map));
  Message_Info_descriptor_ = Message_descriptor_->nested_type(2);
  static const int Message_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Info, mapsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Info, playersnb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Info, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Info, starty_),
  };
  Message_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Info_descriptor_,
      Message_Info::default_instance_,
      Message_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Info));
  Message_OwnPlayerInfo_descriptor_ = Message_descriptor_->nested_type(3);
  static const int Message_OwnPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_OwnPlayerInfo, life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_OwnPlayerInfo, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_OwnPlayerInfo, stock_),
  };
  Message_OwnPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_OwnPlayerInfo_descriptor_,
      Message_OwnPlayerInfo::default_instance_,
      Message_OwnPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_OwnPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_OwnPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_OwnPlayerInfo));
  Message_MessageType_descriptor_ = Message_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetworkProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Player_descriptor_, &Message_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Map_descriptor_, &Message_Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Info_descriptor_, &Message_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_OwnPlayerInfo_descriptor_, &Message_OwnPlayerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetworkProtocol_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Message_Player::default_instance_;
  delete Message_Player_reflection_;
  delete Message_Map::default_instance_;
  delete Message_Map_reflection_;
  delete Message_Info::default_instance_;
  delete Message_Info_reflection_;
  delete Message_OwnPlayerInfo::default_instance_;
  delete Message_OwnPlayerInfo_reflection_;
}

void protobuf_AddDesc_NetworkProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025NetworkProtocol.proto\022\tBomberman\"\363\004\n\007M"
    "essage\022,\n\004type\030\001 \002(\0162\036.Bomberman.Message"
    ".MessageType\022)\n\006player\030\004 \003(\0132\031.Bomberman"
    ".Message.Player\022#\n\003map\030\005 \003(\0132\026.Bomberman"
    ".Message.Map\022%\n\004info\030\006 \003(\0132\027.Bomberman.M"
    "essage.Info\0227\n\rownPlayerInfo\030\007 \003(\0132 .Bom"
    "berman.Message.OwnPlayerInfo\032K\n\006Player\022\020"
    "\n\010playerId\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\013"
    "\n\003dir\030\004 \001(\005\022\014\n\004life\030\005 \001(\005\0323\n\003Map\022\016\n\006star"
    "tX\030\001 \001(\005\022\016\n\006startY\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\032J"
    "\n\004Info\022\017\n\007mapSize\030\001 \001(\005\022\021\n\tplayersNb\030\002 \001"
    "(\005\022\016\n\006startX\030\003 \001(\002\022\016\n\006startY\030\004 \001(\002\032;\n\rOw"
    "nPlayerInfo\022\014\n\004life\030\001 \001(\005\022\r\n\005range\030\002 \001(\005"
    "\022\r\n\005stock\030\003 \001(\005\"\177\n\013MessageType\022\014\n\010OWN_MO"
    "VE\020\001\022\014\n\010OWN_BOMB\020\002\022\016\n\nMAP_UPDATE\020\003\022\021\n\rPL"
    "AYER_UPDATE\020\004\022\t\n\005INFOS\020\005\022\021\n\rCONSUME_BONU"
    "S\020\006\022\023\n\017OWN_PLAYER_INFO\020\007", 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetworkProtocol.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message_Player::default_instance_ = new Message_Player();
  Message_Map::default_instance_ = new Message_Map();
  Message_Info::default_instance_ = new Message_Info();
  Message_OwnPlayerInfo::default_instance_ = new Message_OwnPlayerInfo();
  Message::default_instance_->InitAsDefaultInstance();
  Message_Player::default_instance_->InitAsDefaultInstance();
  Message_Map::default_instance_->InitAsDefaultInstance();
  Message_Info::default_instance_->InitAsDefaultInstance();
  Message_OwnPlayerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetworkProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetworkProtocol_2eproto {
  StaticDescriptorInitializer_NetworkProtocol_2eproto() {
    protobuf_AddDesc_NetworkProtocol_2eproto();
  }
} static_descriptor_initializer_NetworkProtocol_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MessageType_descriptor_;
}
bool Message_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_MessageType Message::OWN_MOVE;
const Message_MessageType Message::OWN_BOMB;
const Message_MessageType Message::MAP_UPDATE;
const Message_MessageType Message::PLAYER_UPDATE;
const Message_MessageType Message::INFOS;
const Message_MessageType Message::CONSUME_BONUS;
const Message_MessageType Message::OWN_PLAYER_INFO;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message_Player::kPlayerIdFieldNumber;
const int Message_Player::kXFieldNumber;
const int Message_Player::kYFieldNumber;
const int Message_Player::kDirFieldNumber;
const int Message_Player::kLifeFieldNumber;
#endif  // !_MSC_VER

Message_Player::Message_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_Player::InitAsDefaultInstance() {
}

Message_Player::Message_Player(const Message_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_Player::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  x_ = 0;
  y_ = 0;
  dir_ = 0;
  life_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Player::~Message_Player() {
  SharedDtor();
}

void Message_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Player_descriptor_;
}

const Message_Player& Message_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkProtocol_2eproto();
  return *default_instance_;
}

Message_Player* Message_Player::default_instance_ = NULL;

Message_Player* Message_Player::New() const {
  return new Message_Player;
}

void Message_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    x_ = 0;
    y_ = 0;
    dir_ = 0;
    life_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dir;
        break;
      }

      // optional int32 dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_life;
        break;
      }

      // optional int32 life = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_)));
          set_has_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional int32 dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dir(), output);
  }

  // optional int32 life = 5;
  if (has_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->life(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional int32 dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dir(), target);
  }

  // optional int32 life = 5;
  if (has_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->life(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional int32 dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dir());
    }

    // optional int32 life = 5;
    if (has_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Player::MergeFrom(const Message_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_life()) {
      set_life(from.life());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Player::CopyFrom(const Message_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Player::IsInitialized() const {

  return true;
}

void Message_Player::Swap(Message_Player* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(dir_, other->dir_);
    std::swap(life_, other->life_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Player_descriptor_;
  metadata.reflection = Message_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Map::kStartXFieldNumber;
const int Message_Map::kStartYFieldNumber;
const int Message_Map::kDataFieldNumber;
#endif  // !_MSC_VER

Message_Map::Message_Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_Map::InitAsDefaultInstance() {
}

Message_Map::Message_Map(const Message_Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_Map::SharedCtor() {
  _cached_size_ = 0;
  startx_ = 0;
  starty_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Map::~Message_Map() {
  SharedDtor();
}

void Message_Map::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Message_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Map_descriptor_;
}

const Message_Map& Message_Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkProtocol_2eproto();
  return *default_instance_;
}

Message_Map* Message_Map::default_instance_ = NULL;

Message_Map* Message_Map::New() const {
  return new Message_Map;
}

void Message_Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startx_ = 0;
    starty_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startY;
        break;
      }

      // optional int32 startY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startX = 1;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startx(), output);
  }

  // optional int32 startY = 2;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starty(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startX = 1;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startx(), target);
  }

  // optional int32 startY = 2;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starty(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startX = 1;
    if (has_startx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startx());
    }

    // optional int32 startY = 2;
    if (has_starty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starty());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Map::MergeFrom(const Message_Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Map::CopyFrom(const Message_Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Map::IsInitialized() const {

  return true;
}

void Message_Map::Swap(Message_Map* other) {
  if (other != this) {
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Map_descriptor_;
  metadata.reflection = Message_Map_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Info::kMapSizeFieldNumber;
const int Message_Info::kPlayersNbFieldNumber;
const int Message_Info::kStartXFieldNumber;
const int Message_Info::kStartYFieldNumber;
#endif  // !_MSC_VER

Message_Info::Message_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_Info::InitAsDefaultInstance() {
}

Message_Info::Message_Info(const Message_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_Info::SharedCtor() {
  _cached_size_ = 0;
  mapsize_ = 0;
  playersnb_ = 0;
  startx_ = 0;
  starty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Info::~Message_Info() {
  SharedDtor();
}

void Message_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Info_descriptor_;
}

const Message_Info& Message_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkProtocol_2eproto();
  return *default_instance_;
}

Message_Info* Message_Info::default_instance_ = NULL;

Message_Info* Message_Info::New() const {
  return new Message_Info;
}

void Message_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapsize_ = 0;
    playersnb_ = 0;
    startx_ = 0;
    starty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapsize_)));
          set_has_mapsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playersNb;
        break;
      }

      // optional int32 playersNb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playersNb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playersnb_)));
          set_has_playersnb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_startX;
        break;
      }

      // optional float startX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_startY;
        break;
      }

      // optional float startY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mapSize = 1;
  if (has_mapsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapsize(), output);
  }

  // optional int32 playersNb = 2;
  if (has_playersnb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playersnb(), output);
  }

  // optional float startX = 3;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->startx(), output);
  }

  // optional float startY = 4;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->starty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mapSize = 1;
  if (has_mapsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapsize(), target);
  }

  // optional int32 playersNb = 2;
  if (has_playersnb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playersnb(), target);
  }

  // optional float startX = 3;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->startx(), target);
  }

  // optional float startY = 4;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->starty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapSize = 1;
    if (has_mapsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapsize());
    }

    // optional int32 playersNb = 2;
    if (has_playersnb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playersnb());
    }

    // optional float startX = 3;
    if (has_startx()) {
      total_size += 1 + 4;
    }

    // optional float startY = 4;
    if (has_starty()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Info::MergeFrom(const Message_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapsize()) {
      set_mapsize(from.mapsize());
    }
    if (from.has_playersnb()) {
      set_playersnb(from.playersnb());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Info::CopyFrom(const Message_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Info::IsInitialized() const {

  return true;
}

void Message_Info::Swap(Message_Info* other) {
  if (other != this) {
    std::swap(mapsize_, other->mapsize_);
    std::swap(playersnb_, other->playersnb_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Info_descriptor_;
  metadata.reflection = Message_Info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_OwnPlayerInfo::kLifeFieldNumber;
const int Message_OwnPlayerInfo::kRangeFieldNumber;
const int Message_OwnPlayerInfo::kStockFieldNumber;
#endif  // !_MSC_VER

Message_OwnPlayerInfo::Message_OwnPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_OwnPlayerInfo::InitAsDefaultInstance() {
}

Message_OwnPlayerInfo::Message_OwnPlayerInfo(const Message_OwnPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_OwnPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  life_ = 0;
  range_ = 0;
  stock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_OwnPlayerInfo::~Message_OwnPlayerInfo() {
  SharedDtor();
}

void Message_OwnPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message_OwnPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_OwnPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_OwnPlayerInfo_descriptor_;
}

const Message_OwnPlayerInfo& Message_OwnPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkProtocol_2eproto();
  return *default_instance_;
}

Message_OwnPlayerInfo* Message_OwnPlayerInfo::default_instance_ = NULL;

Message_OwnPlayerInfo* Message_OwnPlayerInfo::New() const {
  return new Message_OwnPlayerInfo;
}

void Message_OwnPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    life_ = 0;
    range_ = 0;
    stock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_OwnPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 life = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_)));
          set_has_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range;
        break;
      }

      // optional int32 range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stock;
        break;
      }

      // optional int32 stock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_)));
          set_has_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_OwnPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 life = 1;
  if (has_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->life(), output);
  }

  // optional int32 range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->range(), output);
  }

  // optional int32 stock = 3;
  if (has_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_OwnPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 life = 1;
  if (has_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->life(), target);
  }

  // optional int32 range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->range(), target);
  }

  // optional int32 stock = 3;
  if (has_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_OwnPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 life = 1;
    if (has_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life());
    }

    // optional int32 range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // optional int32 stock = 3;
    if (has_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_OwnPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_OwnPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_OwnPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_OwnPlayerInfo::MergeFrom(const Message_OwnPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_life()) {
      set_life(from.life());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_stock()) {
      set_stock(from.stock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_OwnPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_OwnPlayerInfo::CopyFrom(const Message_OwnPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_OwnPlayerInfo::IsInitialized() const {

  return true;
}

void Message_OwnPlayerInfo::Swap(Message_OwnPlayerInfo* other) {
  if (other != this) {
    std::swap(life_, other->life_);
    std::swap(range_, other->range_);
    std::swap(stock_, other->stock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_OwnPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_OwnPlayerInfo_descriptor_;
  metadata.reflection = Message_OwnPlayerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kPlayerFieldNumber;
const int Message::kMapFieldNumber;
const int Message::kInfoFieldNumber;
const int Message::kOwnPlayerInfoFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkProtocol_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  player_.Clear();
  map_.Clear();
  info_.Clear();
  ownplayerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bomberman.Message.MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Bomberman::Message_MessageType_IsValid(value)) {
            set_type(static_cast< ::Bomberman::Message_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        break;
      }

      // repeated .Bomberman.Message.Player player = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        if (input->ExpectTag(42)) goto parse_map;
        break;
      }

      // repeated .Bomberman.Message.Map map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_map;
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // repeated .Bomberman.Message.Info info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        if (input->ExpectTag(58)) goto parse_ownPlayerInfo;
        break;
      }

      // repeated .Bomberman.Message.OwnPlayerInfo ownPlayerInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownPlayerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ownplayerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ownPlayerInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bomberman.Message.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Bomberman.Message.Player player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player(i), output);
  }

  // repeated .Bomberman.Message.Map map = 5;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->map(i), output);
  }

  // repeated .Bomberman.Message.Info info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info(i), output);
  }

  // repeated .Bomberman.Message.OwnPlayerInfo ownPlayerInfo = 7;
  for (int i = 0; i < this->ownplayerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ownplayerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bomberman.Message.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Bomberman.Message.Player player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player(i), target);
  }

  // repeated .Bomberman.Message.Map map = 5;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->map(i), target);
  }

  // repeated .Bomberman.Message.Info info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info(i), target);
  }

  // repeated .Bomberman.Message.OwnPlayerInfo ownPlayerInfo = 7;
  for (int i = 0; i < this->ownplayerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ownplayerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bomberman.Message.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Bomberman.Message.Player player = 4;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  // repeated .Bomberman.Message.Map map = 5;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  // repeated .Bomberman.Message.Info info = 6;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .Bomberman.Message.OwnPlayerInfo ownPlayerInfo = 7;
  total_size += 1 * this->ownplayerinfo_size();
  for (int i = 0; i < this->ownplayerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ownplayerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  map_.MergeFrom(from.map_);
  info_.MergeFrom(from.info_);
  ownplayerinfo_.MergeFrom(from.ownplayerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    player_.Swap(&other->player_);
    map_.Swap(&other->map_);
    info_.Swap(&other->info_);
    ownplayerinfo_.Swap(&other->ownplayerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Bomberman

// @@protoc_insertion_point(global_scope)
